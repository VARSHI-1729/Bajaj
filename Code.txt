//Main Application
package com.Bajaj.hiring;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class HiringApplication {
    public static void main(String[] args) {
        SpringApplication.run(HiringApplication.class, args);
    }
}


//Configuration Class
package com.Bajaj.hiring.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class AppConfig {
    
    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}


//Modal class
package com.Bajaj.hiring.model;

import com.fasterxml.jackson.annotation.JsonProperty;

public class WebhookResponse {
    @JsonProperty("webhook")
    private String webhookUrl;
    
    @JsonProperty("accessToken")
    private String accessToken;
    
    @JsonProperty("questionLink")
    private String questionLink;
    
    // Getter and Setter methods
    public String getWebhookUrl() {
        return webhookUrl;
    }
    
    public void setWebhookUrl(String webhookUrl) {
        this.webhookUrl = webhookUrl;
    }
    
    public String getAccessToken() {
        return accessToken;
    }
    
    public void setAccessToken(String accessToken) {
        this.accessToken = accessToken;
    }
    
    public String getQuestionLink() {
        return questionLink;
    }
    
    public void setQuestionLink(String questionLink) {
        this.questionLink = questionLink;
    }
}


//Service class

package com.Bajaj.hiring.service;

import com.Bajaj.hiring.model.WebhookResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;

@Service
public class HiringService {
    
    private final RestTemplate restTemplate;
    
    @Autowired
    public HiringService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }
    
    @EventListener(ApplicationReadyEvent.class)
    public void onApplicationStart() {
        try {
            System.out.println("Application started. Generating webhook...");
            
            // Step 1: Generate webhook
            WebhookResponse webhookResponse = generateWebhook();
            System.out.println("Webhook generated: " + webhookResponse.getWebhookUrl());
            
            // Step 2: Determine question based on registration number
            String questionType = determineQuestionType("REG12347"); // Replace with your regNo
            System.out.println("Question type: " + questionType);
            
            // Step 3: Solve the SQL problem
            String finalQuery = solveSqlProblem(questionType);
            System.out.println("Final query: " + finalQuery);
            
            // Step 4: Submit the solution
            submitSolution(webhookResponse.getWebhookUrl(), webhookResponse.getAccessToken(), finalQuery);
            System.out.println("Solution submitted successfully!");
            
        } catch (Exception e) {
            System.err.println("Error occurred: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private WebhookResponse generateWebhook() {
        String url = "https://bfhldevapigw.healthrx.co.in/hiring/generateWebhook/JAVA";
        
        // Create request body
        String requestBody = "{\"name\": \"John Doe\", \"regNo\": \"REG12347\", \"email\": \"john@example.com\"}";
        
        // Set headers
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
        
        HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
        
        // Send POST request
        ResponseEntity<WebhookResponse> response = restTemplate.exchange(
            url, HttpMethod.POST, entity, WebhookResponse.class);
        
        return response.getBody();
    }
    
    private String determineQuestionType(String regNo) {
        // Extract last two digits
        String lastTwoDigits = regNo.substring(regNo.length() - 2);
        int lastDigits = Integer.parseInt(lastTwoDigits);
        
        // Check if odd or even
        return (lastDigits % 2 == 0) ? "even" : "odd";
    }
    
    private String solveSqlProblem(String questionType) {
        // You need to implement this based on the actual question
        // For now, returning a placeholder query
        if ("odd".equals(questionType)) {
            // Implement solution for odd question
            return "SELECT * FROM table_name WHERE condition;";
        } else {
            // Implement solution for even question
            return "SELECT * FROM table_name WHERE condition;";
        }
    }
    
    private void submitSolution(String webhookUrl, String accessToken, String finalQuery) {
        // Set headers with JWT token
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", accessToken);
        
        // Create request body
        String requestBody = "{\"finalQuery\": \"" + finalQuery + "\"}";
        
        HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
        
        // Send POST request
        ResponseEntity<String> response = restTemplate.exchange(
            webhookUrl, HttpMethod.POST, entity, String.class);
        
        System.out.println("Submission Response: " + response.getBody());
    }
}


// Congifuration file
# Application name
spring.application.name=hiring-app

# Server port
server.port=8080

# Logging level
logging.level.com.Bajaj.hiring=DEBUG